import { storage } from './storage';
import bcrypt from 'bcrypt';

export async function seedTestData() {
  try {
    console.log('üå± Iniciando popula√ß√£o de dados de teste...');

    // 1. Criar primeira organiza√ß√£o (ONG)
    const testOrg = await storage.createOrganization({
      name: 'Instituto Esperan√ßa',
      slug: 'instituto-esperanca',
      cnpj: '12.345.678/0001-90',
      email: 'contato@institutoesperanca.org.br',
      address: {
        street: 'Rua das Flores, 123',
        city: 'S√£o Paulo',
        state: 'SP',
        zipCode: '01234-567'
      },
      subscriptionPlan: 'premium',
      subscriptionStatus: 'active'
    });

    console.log('‚úÖ Organiza√ß√£o criada:', testOrg.name);

    // 2. Criar usu√°rios com diferentes n√≠veis de acesso
    const adminUser = await storage.createUser({
      email: 'admin@institutoesperanca.org.br',
      passwordHash: await bcrypt.hash('admin123', 10),
      name: 'Maria Silva Santos',
      phone: '(11) 99999-1111'
    });

    const managerUser = await storage.createUser({
      email: 'gerente@institutoesperanca.org.br',
      passwordHash: await bcrypt.hash('gerente123', 10),
      name: 'Jo√£o Carlos Oliveira',
      phone: '(11) 99999-2222'
    });

    const volunteerUser = await storage.createUser({
      email: 'voluntario@institutoesperanca.org.br',
      passwordHash: await bcrypt.hash('voluntario123', 10),
      name: 'Ana Paula Costa',
      phone: '(11) 99999-3333'
    });

    console.log('‚úÖ Usu√°rios criados');

    // 3. Atribuir roles aos usu√°rios
    await storage.createUserRole({
      userId: adminUser.id,
      organizationId: testOrg.id,
      role: 'admin',
      permissions: ['read', 'write', 'delete', 'admin'],
      status: 'active'
    });

    await storage.createUserRole({
      userId: managerUser.id,
      organizationId: testOrg.id,
      role: 'project_manager',
      permissions: ['read', 'write'],
      status: 'active'
    });

    await storage.createUserRole({
      userId: volunteerUser.id,
      organizationId: testOrg.id,
      role: 'volunteer',
      permissions: ['read'],
      status: 'active'
    });

    console.log('‚úÖ Roles atribu√≠dos');

    // 4. Criar projetos
    const educationProject = await storage.createProject({
      organizationId: testOrg.id,
      name: 'Alfabetiza√ß√£o Digital',
      description: 'Projeto para ensinar inform√°tica b√°sica para crian√ßas e adultos da comunidade',
      status: 'active',
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-12-15'),
      budget: 50000,
      location: 'Centro Comunit√°rio - Vila Nova',
      beneficiaryTarget: 'Crian√ßas e adultos de 8 a 60 anos',
      expectedResults: 'Capacitar 200 pessoas em inform√°tica b√°sica',
      responsibleUserId: managerUser.id
    });

    const healthProject = await storage.createProject({
      organizationId: testOrg.id,
      name: 'Sa√∫de na Comunidade',
      description: 'Campanhas de sa√∫de preventiva e atendimento b√°sico',
      status: 'active',
      startDate: new Date('2024-02-01'),
      endDate: new Date('2024-11-30'),
      budget: 75000,
      location: 'UBS - Jardim das Flores',
      beneficiaryTarget: 'Fam√≠lias em situa√ß√£o de vulnerabilidade',
      expectedResults: 'Atender 500 fam√≠lias com servi√ßos de sa√∫de preventiva',
      responsibleUserId: managerUser.id
    });

    console.log('‚úÖ Projetos criados');

    // 5. Criar doadores
    const corporateDonor = await storage.createDonor({
      organizationId: testOrg.id,
      name: 'Empresa ABC Ltda',
      email: 'doacao@empresaabc.com.br',
      phone: '(11) 3333-4444',
      donorType: 'corporate',
      document: '98.765.432/0001-10',
      address: 'Av. Paulista, 1000',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '01310-100',
      donationPreferences: ['educacao', 'saude'],
      communicationPreferences: ['email', 'telefone'],
      status: 'active'
    });

    const individualDonor = await storage.createDonor({
      organizationId: testOrg.id,
      name: 'Carlos Eduardo Ferreira',
      email: 'carlos.ferreira@email.com',
      phone: '(11) 99888-7777',
      donorType: 'individual',
      document: '123.456.789-00',
      address: 'Rua das Palmeiras, 456',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '02345-678',
      donationPreferences: ['educacao'],
      communicationPreferences: ['email'],
      status: 'active'
    });

    console.log('‚úÖ Doadores criados');

    // 6. Criar benefici√°rios
    await storage.createBeneficiary({
      organizationId: testOrg.id,
      name: 'Fernanda Santos',
      cpf: '987.654.321-00',
      rg: '12.345.678-9',
      birthDate: new Date('1985-03-15'),
      email: 'fernanda.santos@email.com',
      phone: '(11) 98765-4321',
      address: 'Rua das Ac√°cias, 789',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '03456-789',
      familyIncome: 2500,
      familySize: 4,
      housingSituation: 'propria',
      education: 'ensino_medio_completo',
      profession: 'Auxiliar de limpeza',
      specialNeeds: '',
      status: 'active'
    });

    await storage.createBeneficiary({
      organizationId: testOrg.id,
      name: 'Roberto da Silva',
      cpf: '456.789.123-00',
      rg: '98.765.432-1',
      birthDate: new Date('1978-08-22'),
      email: 'roberto.silva@email.com',
      phone: '(11) 91234-5678',
      address: 'Rua dos L√≠rios, 321',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '04567-890',
      familyIncome: 1800,
      familySize: 3,
      housingSituation: 'alugada',
      education: 'ensino_fundamental_completo',
      profession: 'Pedreiro',
      specialNeeds: '',
      status: 'active'
    });

    console.log('‚úÖ Benefici√°rios criados');

    // 7. Criar volunt√°rios
    await storage.createVolunteer({
      userId: volunteerUser.id,
      organizationId: testOrg.id,
      volunteerNumber: 'VOL-001',
      skills: ['Tecnologia', 'Educa√ß√£o', 'Comunica√ß√£o'],
      availability: ['monday_morning', 'wednesday_afternoon', 'saturday_morning'],
      backgroundCheckStatus: 'approved',
      status: 'active',
      emergencyContact: {
        name: 'Pedro Costa',
        relationship: 'Esposo',
        phone: '(11) 99888-5555'
      },
      personalInfo: {
        name: 'Ana Paula Costa',
        email: 'voluntario@institutoesperanca.org.br',
        phone: '(11) 99999-3333',
        profession: 'Professora',
        experience: 'Experi√™ncia em projetos educacionais e ensino de inform√°tica',
        motivation: 'Desejo ajudar a comunidade atrav√©s da educa√ß√£o e tecnologia'
      }
    });

    await storage.createVolunteer({
      userId: crypto.randomUUID(),
      organizationId: testOrg.id,
      volunteerNumber: 'VOL-002',
      skills: ['Sa√∫de', 'Psicologia', 'Servi√ßo Social'],
      availability: ['tuesday_morning', 'thursday_afternoon', 'friday_morning'],
      backgroundCheckStatus: 'approved',
      status: 'active',
      emergencyContact: {
        name: 'Lucia Mendes',
        relationship: 'M√£e',
        phone: '(11) 98765-1111'
      },
      personalInfo: {
        name: 'Rafael Mendes',
        email: 'rafael.mendes@email.com',
        phone: '(11) 97654-3210',
        profession: 'Psic√≥logo',
        experience: 'Trabalho volunt√°rio em hospitais e ONGs de sa√∫de mental',
        motivation: 'Contribuir para o bem-estar psicol√≥gico da comunidade'
      }
    });

    console.log('‚úÖ Volunt√°rios criados');

    // 8. Criar doa√ß√µes
    await storage.createDonation({
      organizationId: testOrg.id,
      donorId: corporateDonor.id,
      projectId: educationProject.id,
      amount: 10000,
      paymentMethod: 'bank_transfer',
      paymentStatus: 'completed',
      transactionId: 'TXN-001-2024',
      campaignSource: 'Site institucional',
      isRecurring: true,
      recurringFrequency: 'monthly',
      notes: 'Doa√ß√£o mensal para projeto de alfabetiza√ß√£o digital'
    });

    await storage.createDonation({
      organizationId: testOrg.id,
      donorId: individualDonor.id,
      projectId: healthProject.id,
      amount: 500,
      paymentMethod: 'pix',
      paymentStatus: 'completed',
      transactionId: 'PIX-002-2024',
      campaignSource: 'Redes sociais',
      isRecurring: false,
      recurringFrequency: '',
      notes: 'Doa√ß√£o √∫nica para campanha de sa√∫de'
    });

    await storage.createDonation({
      organizationId: testOrg.id,
      donorId: null,
      projectId: null,
      amount: 250,
      paymentMethod: 'pix',
      paymentStatus: 'completed',
      transactionId: 'PIX-003-2024',
      campaignSource: 'Evento beneficente',
      isRecurring: false,
      recurringFrequency: '',
      notes: 'Doa√ß√£o an√¥nima durante evento'
    });

    console.log('‚úÖ Doa√ß√µes criadas');

    console.log('üéâ Dados de teste populados com sucesso!');
    console.log('\nüìù Usu√°rios de teste criados:');
    console.log('Admin: admin@institutoesperanca.org.br / admin123');
    console.log('Gerente: gerente@institutoesperanca.org.br / gerente123');
    console.log('Volunt√°rio: voluntario@institutoesperanca.org.br / voluntario123');

  } catch (error) {
    console.error('‚ùå Erro ao popular dados de teste:', error);
    throw error;
  }
}